
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Briefcase, 
  DollarSign, 
  TrendingUp, 
  Clock, 
  GraduationCap,
  Wrench,
  Info
} from 'lucide-react';
import type { CareerRecommendation } from '@/types/assessment';

interface RecommendationCareerViewProps {
  recommendation: CareerRecommendation;
}

export const RecommendationCareerView = ({ recommendation }: RecommendationCareerViewProps) => {
  return (
    <div className="space-y-6">
      {/* AI-Generated Content Notice */}
      <Alert>
        <Info className="h-4 w-4" />
        <AlertDescription>
          This career information was generated by AI based on your assessment results. 
          For comprehensive details, explore similar careers from our verified database below.
        </AlertDescription>
      </Alert>

      {/* Career Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Briefcase className="h-6 w-6 text-primary" />
            {recommendation.title}
            <Badge variant="secondary">
              {Math.round(recommendation.matchScore)}% Match
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-muted-foreground leading-relaxed">
            {recommendation.description}
          </p>
          
          {recommendation.reasoning && (
            <div className="bg-blue-50 dark:bg-blue-950/20 p-4 rounded-lg">
              <h4 className="font-semibold mb-2 text-blue-900 dark:text-blue-100">
                Why This Career Matches You:
              </h4>
              <p className="text-sm text-blue-800 dark:text-blue-200">
                {recommendation.reasoning}
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Career Details Grid */}
      <div className="grid gap-4 md:grid-cols-2">
        {/* Compensation & Growth */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <DollarSign className="h-5 w-5 text-green-600" />
              Compensation & Growth
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {recommendation.salaryRange && (
              <div>
                <p className="text-sm text-muted-foreground">Salary Range</p>
                <p className="font-semibold text-green-600">{recommendation.salaryRange}</p>
              </div>
            )}
            
            {recommendation.growthOutlook && (
              <div>
                <p className="text-sm text-muted-foreground flex items-center gap-1">
                  <TrendingUp className="h-4 w-4" />
                  Growth Outlook
                </p>
                <p className="font-medium">{recommendation.growthOutlook}</p>
              </div>
            )}
            
            {recommendation.timeToEntry && (
              <div>
                <p className="text-sm text-muted-foreground flex items-center gap-1">
                  <Clock className="h-4 w-4" />
                  Time to Entry
                </p>
                <p className="font-medium">{recommendation.timeToEntry}</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Requirements */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <GraduationCap className="h-5 w-5 text-blue-600" />
              Requirements
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {recommendation.educationRequirements && recommendation.educationRequirements.length > 0 && (
              <div>
                <p className="text-sm text-muted-foreground mb-2">Education Requirements</p>
                <div className="flex flex-wrap gap-2">
                  {recommendation.educationRequirements.map((edu, index) => (
                    <Badge key={index} variant="outline">
                      {edu}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
            
            {recommendation.requiredSkills && recommendation.requiredSkills.length > 0 && (
              <div>
                <p className="text-sm text-muted-foreground mb-2 flex items-center gap-1">
                  <Wrench className="h-4 w-4" />
                  Key Skills Needed
                </p>
                <div className="flex flex-wrap gap-2">
                  {recommendation.requiredSkills.map((skill, index) => (
                    <Badge key={index} variant="secondary">
                      {skill}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Work Environment */}
      {recommendation.workEnvironment && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Work Environment</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-muted-foreground">{recommendation.workEnvironment}</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};
